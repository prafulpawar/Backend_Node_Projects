// package 
//  downloaded from npm 
//  and modules from node js
// fs 
//http
// npm package json and node modules folder

// const fs = require('fs');
// fs.mkdir('its-abcd',function(err){
//     if(err ) console.log(err.message);
//     else console.log('Created directory')
// })

// WriteFile
// readFile
// readdir  ---> dirent ek data structure hai jo file ka data type batata hai
// unlink ---> kisi bhi file ko delete kar sakta hai
// fs.rmdir ---> kisi bhi folder ko delete kar sakta hai ---> sirf dekete tab karta hai
            ----> Jab Folder Khali ho ---> ek optional paramter dene ke baad mein-->
            {recursive:true} iske baad kar sakte hai --->
// http 

pacage kya hota hai ---> resubale code hota hai koi aur developer likhta hai
aur hum use kar sakte hai ---> resubale code

read write unlink mkdir readfolder

// const catMe=require('cat-me')
// console.log(catMe())

// const http = require('http')

// const server=http.createServer((req,res)=>{
//      if(req.url == '/about'){
//         res.end('aboutPage')
//      }
//      else {
//          res.end(catMe())
//      }
// })
// server.listen(3000,()=>{
//     console.log('Server is running on port 3000') 
//      // Server started successfully on port 3000
// })

// // const express = require('express');
// // const app = express();
// // const morgon = require('morgan')
// // app.set('view engine','ejs');
// // app.use((req,res,next)=>{
// //      console.log("This Is Middleware");
// //      // bass hum return karate hai next 
// //      // build in 
// //      // custom 
// //      // 3party middleware
// //      next();
// // })
// // app.use(morgon())

// // app.get('/',(req,res)=>{
// //     res.render('index')
// // })

// // app.listen(3000,()=>{
// //     console.log('Server is running on port 3000') // Server started successfully on port 3000
// // })


const http = require('http');
const server = http.createServer((req,res)=>{
        if(req.url === '/'){
            res.end("HomePage")
        }
        else if(req.url ==="/contact"){
            res.end("ContactPage")
        }
})

server.listen(3000,()=>{

    console.log(`Server Is Runnning On Port ${3000}`)
})


learn about that send vs end 
send---->  json
end -----> Ends response with plain text

Key Differences ------------> SEND VS END
Feature	            res.send()	                       res.end()
Framework	        Express	                           Core HTTP
Sets Content-Type	Yes	                               No
Data Conversion	    Yes, for objects (to JSON)	       No
Ends Response	    Yes, implicitly	Yes,               explicitly
Ease of Use      	High	                           Requires manual handling

res.render() is a method used to render template files and send the rendered 
HTML as a response to the client. This is commonly used in server-side rendering (SSR) applications.

express.static --> express ko batana padhta hai ki static files ka hai ---> static file aise hoti h chnage nhi hoti h jaise
ejs chnage ho jati h par css nahi chnage hongi na
---> now ab folder ka naam public rakho aur use path se jodo (path.join(__dirname,public)) ---> nodejs ne inbuilt next() likha hai to
fir in logo ne next banaya h 

res.send()
res.render() ---> npm i ejs , and npm init -y ye dono cheeze honi chahiye
how can we create pacage json by using  file npm init -y

app.use ---> har baar chalta hai jab bhi koi route hit honga
us se pahle app.use chalta hai 
app.use((req,res,next)=>{
    console.log("World ")
    next()
})
aur yaha par 3 cheeze aati h agar hum console.log kare to fir aage res nahi jayenga to hum
next ko call karennge
